"""
This type stub file was generated by pyright.
"""

import queue
import sys
import threading
import requests
from abc import ABC
from enum import Enum
from functools import total_ordering
from typing import Any, Deque, Generic, TYPE_CHECKING, TypeVar
from typing_extensions import TypeAlias

if sys.platform == 'darwin':
    ...
if TYPE_CHECKING:
    swt_base = requests.Session
def to_bytes(string, encoding=..., errors=...): # -> bytes:
    ...

class FakeGenericMeta(type):
    def __getitem__(cls, item): # -> Self:
        ...
    


if TYPE_CHECKING:
    T = TypeVar('T')
    class GenericQueue(queue.Queue[T], Generic[T]):
        ...
    
    
else:
    ...
class LockedQueue(GenericQueue[T]):
    def __init__(self, lock, maxsize=...) -> None:
        ...
    


KNOWN_GOOD_NAMESERVER = ...
DNS_QUERY = ...
def is_dns_working(timeout=..., check=...): # -> bool:
    ...

class WaitOnMainThread(ABC):
    def __init__(self) -> None:
        ...
    
    def setup(self, lock=...): # -> None:
        ...
    
    def signal(self): # -> None:
        ...
    
    def check(self, release=...): # -> None:
        ...
    
    def destroy(self): # -> None:
        ...
    


class NoInternet(WaitOnMainThread):
    ...


class Enospc(WaitOnMainThread):
    ...


no_internet = ...
enospc = ...
def setup_urllib3_ssl(): # -> None:
    ...

def make_requests_session(session_type, retry, timeout, verify, user_agent, cookiefile): # -> SessionWithTimeout:
    class SessionWithTimeout(swt_base):
        ...
    
    

@total_ordering
class LogLevel(Enum):
    INFO = ...
    WARN = ...
    ERROR = ...
    def __lt__(self, other) -> bool:
        ...
    


def fsync(fd): # -> None:
    ...

def fdatasync(fd): # -> None:
    ...

class MultiSeqProxy:
    def __init__(self, subseqs) -> None:
        ...
    
    def append(self, value): # -> None:
        ...
    
    def remove(self, value): # -> None:
        ...
    


class NotifierWaiters(Deque[Any]):
    def __iter__(self): # -> Generator[Any, None, None]:
        ...
    
    def __getitem__(self, index): # -> deque[Any] | Any:
        ...
    
    def remove(self, value): # -> None:
        ...
    


class MultiCondition(threading.Condition):
    def __init__(self, lock) -> None:
        ...
    
    def wait(self, children, timeout=...): # -> None:
        ...
    
    def notify(self, n=...):
        ...
    
    def notify_all(self):
        ...
    
    notifyAll = ...


def lock_is_owned(lock): # -> bool:
    ...

def lock_release_save(lock): # -> None:
    ...

def lock_acquire_restore(lock, state): # -> None:
    ...

ACParams: TypeAlias = 'tuple[tuple[Any, ...], dict[str, Any]]'
class AsyncCallable:
    request: LockedQueue[ACParams | None]
    response: LockedQueue[Any]
    def __init__(self, lock, fun, name=...) -> None:
        ...
    
    def run_thread(self): # -> None:
        ...
    
    def put(self, *args, **kwargs): # -> None:
        ...
    
    def get(self, *args, **kwargs): # -> Any:
        ...
    
    def quit(self): # -> None:
        ...
    


def opendir(dir_, flags): # -> int:
    ...

def try_unlink(path): # -> None:
    ...

def copyfile(src, dst):
    ...

def have_module(name): # -> bool:
    ...

