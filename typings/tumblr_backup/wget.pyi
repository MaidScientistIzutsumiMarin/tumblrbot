"""
This type stub file was generated by pyright.
"""

from argparse import Namespace
from enum import Enum
from http.client import HTTPMessage as _HttplibHTTPMessage, HTTPResponse as _HttplibHTTPResponse
from typing import Any, BinaryIO, Callable, Dict, IO, Iterable, Mapping, Optional, Set, TYPE_CHECKING
from urllib3 import BaseHTTPResponse, HTTPConnectionPool, HTTPResponse, HTTPSConnectionPool, PoolManager, Retry as Retry
from urllib3.connection import HTTPConnection, HTTPSConnection
from .util import LogLevel
from typing_extensions import TypeAlias

if TYPE_CHECKING:
    ...
TYPE_BODY: TypeAlias = 'bytes | IO[Any] | Iterable[bytes] | str'
HTTP_TIMEOUT = ...
HTTP_RETRY = ...
HTTP_CHUNK_SIZE = ...
base_headers = ...
RETROKF = ...
class UErr(Enum):
    RETRUNNEEDED = ...
    RETRINCOMPLETE = ...
    RETRFINISHED = ...


class HttpStat:
    current_url: Optional[Any]
    contlen: Optional[int]
    last_modified: Optional[str]
    remote_time: Optional[int]
    dest_dir: Optional[int]
    part_file: Optional[BinaryIO]
    remote_encoding: Optional[str]
    enc_is_identity: Optional[bool]
    decoder: Optional[object]
    _make_part_file: Optional[Callable[[], BinaryIO]]
    def __init__(self) -> None:
        ...
    
    def set_part_file_supplier(self, value): # -> None:
        ...
    
    def init_part_file(self): # -> None:
        ...
    


class WGHTTPResponse(HTTPResponse):
    REDIRECT_STATUSES = ...
    def __init__(self, body: TYPE_BODY = ..., headers: Mapping[str, str] | None = ..., status: int = ..., version: int = ..., version_string: str = ..., reason: str | None = ..., preload_content: bool = ..., decode_content: bool = ..., original_response: _HttplibHTTPResponse | None = ..., pool: WGHTTPConnectionPool | None = ..., connection: WGHTTPConnection | None = ..., msg: _HttplibHTTPMessage | None = ..., retries: Retry | None = ..., enforce_content_length: bool = ..., request_method: str | None = ..., request_url: str | None = ..., auto_close: bool = ...) -> None:
        ...
    
    @property
    def decoder(self): # -> ContentDecoder | None:
        ...
    
    @decoder.setter
    def decoder(self, value): # -> None:
        ...
    
    def get_content_length(self, meth): # -> int | None:
        ...
    


class WGHTTPConnection(HTTPConnection):
    def getresponse(self) -> WGHTTPResponse:
        ...
    


class WGHTTPSConnection(WGHTTPConnection, HTTPSConnection):
    ...


class WGHTTPConnectionPool(HTTPConnectionPool):
    ConnectionCls = ...
    def __init__(self, host, port=..., *args, **kwargs) -> None:
        ...
    


class WGHTTPSConnectionPool(HTTPSConnectionPool):
    ConnectionCls = ...
    def __init__(self, host, port=..., *args, **kwargs) -> None:
        ...
    


class WGPoolManager(PoolManager):
    def __init__(self, num_pools=..., headers=..., **connection_pool_kw) -> None:
        ...
    
    def connection_from_url(self, url, pool_kwargs=...): # -> HTTPConnectionPool:
        ...
    
    def urlopen(self, method, url, redirect=..., **kw): # -> BaseHTTPResponse:
        ...
    


poolman = ...
class Logger:
    def __init__(self, original_url, post_id, log) -> None:
        ...
    
    def info(self, url, msg): # -> None:
        ...
    
    def warn(self, url, msg): # -> None:
        ...
    
    def error(self, url, msg, info): # -> None:
        ...
    


def gethttp(url, hstat, doctype, logger, retry_counter, use_dns_check): # -> tuple[Any, Any]:
    ...

def process_response(url, hstat, doctype, logger, retry_counter, resp):
    ...

def parse_crange_num(hdrc, ci, postchar): # -> tuple[Any, int]:
    ...

def parse_content_range(hdr): # -> tuple[int, int, int | None] | None:
    ...

def touch(fl, mtime, dir_fd=...): # -> None:
    ...

class WGError(Exception):
    def __init__(self, logger, url, msg, cause=..., info=...) -> None:
        ...
    
    def log(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    


class WGMaxRetryError(WGError):
    ...


class WGUnreachableHostError(WGError):
    ...


class WGBadProtocolError(WGError):
    ...


class WGBadResponseError(WGError):
    ...


class WGWrongCodeError(WGBadResponseError):
    def __init__(self, logger, url, statcode, statmsg, headers) -> None:
        ...
    


class WGRangeError(WGBadResponseError):
    ...


unreachable_hosts: Set[str] = ...
class RetryCounter:
    TRY_LIMIT = ...
    MAX_RETRY_WAIT = ...
    def __init__(self, logger) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def should_retry(self): # -> bool:
        ...
    
    def increment(self, url, hstat, cause, sleep_dur=...): # -> None:
        ...
    


def normalized_host_from_url(url): # -> str:
    ...

def normalized_host(scheme, host, port): # -> str:
    ...

def setup_wget(ssl_verify, user_agent): # -> None:
    ...

def urlopen(url, use_dns_check: bool, headers: Optional[Dict[str, str]] = ..., **kwargs) -> BaseHTTPResponse:
    ...

class WgetRetrieveWrapper:
    def __init__(self, log: Callable[[LogLevel, str], None], options: Namespace) -> None:
        ...
    
    def __call__(self, url, file, post_id=..., post_timestamp=..., adjust_basename=...): # -> HttpStat:
        ...
    


